<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE nmaprun>
<?xml-stylesheet href="file:///usr/bin/../share/nmap/nmap.xsl" type="text/xsl"?>
<!-- Nmap 7.70 scan initiated Wed Aug 14 20:10:58 2019 as: nmap -sC -sV -p- -&#45;script vuln -oA nmap/VulnScanAllPorts 10.11.1.22 -->
<nmaprun scanner="nmap" args="nmap -sC -sV -p- -&#45;script vuln -oA nmap/VulnScanAllPorts 10.11.1.22" start="1565802658" startstr="Wed Aug 14 20:10:58 2019" version="7.70" xmloutputversion="1.04">
<scaninfo type="syn" protocol="tcp" numservices="65535" services="1-65535"/>
<verbose level="0"/>
<debugging level="0"/>
<prescript><script id="broadcast-avahi-dos" output="&#xa;  Discovered hosts:&#xa;    224.0.0.251&#xa;  After NULL UDP avahi packet DoS (CVE-2011-1002).&#xa;  Hosts are all up (not vulnerable).&#xa;"/></prescript><host starttime="1565802692" endtime="1565803222"><status state="up" reason="arp-response" reason_ttl="0"/>
<address addr="10.11.1.22" addrtype="ipv4"/>
<address addr="00:50:56:B8:02:B1" addrtype="mac" vendor="VMware"/>
<hostnames>
</hostnames>
<ports><extraports state="closed" count="65524">
<extrareasons reason="resets" count="65524"/>
</extraports>
<port protocol="tcp" portid="21"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="ftp" method="table" conf="3"/><script id="sslv2-drown" output="&#xa;"></script></port>
<port protocol="tcp" portid="22"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="ssh" product="OpenSSH" version="3.1p1" extrainfo="protocol 1.99" method="probed" conf="10"><cpe>cpe:/a:openbsd:openssh:3.1p1</cpe></service></port>
<port protocol="tcp" portid="23"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="telnet" method="table" conf="3"/></port>
<port protocol="tcp" portid="25"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="smtp" method="table" conf="3"/><script id="sslv2-drown" output="&#xa;"></script></port>
<port protocol="tcp" portid="80"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="http" product="Apache httpd" version="1.3.23" extrainfo="(Unix)  (Red-Hat/Linux) mod_python/2.7.6 Python/1.5.2 mod_ssl/2.8.7 OpenSSL/0.9.6b DAV/1.0.3 PHP/4.1.2 mod_perl/1.26 mod_throttle/3.1.2" method="probed" conf="10"><cpe>cpe:/a:apache:http_server:1.3.23</cpe></service><script id="http-csrf" output="Couldn&apos;t find any CSRF vulnerabilities."/><script id="http-dombased-xss" output="Couldn&apos;t find any DOM based XSS."/><script id="http-server-header" output="Apache/1.3.23 (Unix)  (Red-Hat/Linux) mod_python/2.7.6 Python/1.5.2 mod_ssl/2.8.7 OpenSSL/0.9.6b DAV/1.0.3 PHP/4.1.2 mod_perl/1.26 mod_throttle/3.1.2"><elem>Apache/1.3.23 (Unix)  (Red-Hat/Linux) mod_python/2.7.6 Python/1.5.2 mod_ssl/2.8.7 OpenSSL/0.9.6b DAV/1.0.3 PHP/4.1.2 mod_perl/1.26 mod_throttle/3.1.2</elem>
</script><script id="http-stored-xss" output="Couldn&apos;t find any stored XSS vulnerabilities."/><script id="http-trace" output="TRACE is enabled"/></port>
<port protocol="tcp" portid="111"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="rpcbind" version="2" extrainfo="RPC #100000" method="probed" conf="10"/><script id="rpcinfo" output="&#xa;  program version   port/proto  service&#xa;  100000  2            111/tcp  rpcbind&#xa;  100000  2            111/udp  rpcbind&#xa;  100024  1          32768/tcp  status&#xa;  100024  1          32768/udp  status&#xa;"><table key="100024">
<table key="udp">
<elem key="port">32768</elem>
<table key="version">
<elem>1</elem>
</table>
</table>
<table key="tcp">
<elem key="port">32768</elem>
<table key="version">
<elem>1</elem>
</table>
</table>
</table>
<table key="100000">
<table key="tcp">
<elem key="port">111</elem>
<table key="version">
<elem>2</elem>
</table>
</table>
<table key="udp">
<elem key="port">111</elem>
<table key="version">
<elem>2</elem>
</table>
</table>
</table>
</script></port>
<port protocol="tcp" portid="139"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="netbios-ssn" product="Samba smbd" extrainfo="workgroup: vMYGROUP" method="probed" conf="10"><cpe>cpe:/a:samba:samba</cpe></service></port>
<port protocol="tcp" portid="199"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="smux" product="Linux SNMP multiplexer" ostype="Linux" method="probed" conf="10"><cpe>cpe:/o:linux:linux_kernel</cpe></service></port>
<port protocol="tcp" portid="443"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="https" product="Apache/1.3.23 (Unix)  (Red-Hat/Linux) mod_python/2.7.6 Python/1.5.2 mod_ssl/2.8." tunnel="ssl" method="probed" conf="10"/><script id="http-aspnet-debug" output="ERROR: Script execution failed (use -d to debug)"/><script id="http-csrf" output="Couldn&apos;t find any CSRF vulnerabilities."/><script id="http-dombased-xss" output="Couldn&apos;t find any DOM based XSS."/><script id="http-server-header" output="Apache/1.3.23 (Unix)  (Red-Hat/Linux) mod_python/2.7.6 Python/1.5.2 mod_ssl/2.8.7 OpenSSL/0.9.6b DAV/1.0.3 PHP/4.1.2 mod_perl/1.26 mod_throttle/3.1.2"><elem>Apache/1.3.23 (Unix)  (Red-Hat/Linux) mod_python/2.7.6 Python/1.5.2 mod_ssl/2.8.7 OpenSSL/0.9.6b DAV/1.0.3 PHP/4.1.2 mod_perl/1.26 mod_throttle/3.1.2</elem>
</script><script id="http-stored-xss" output="Couldn&apos;t find any stored XSS vulnerabilities."/><script id="ssl-ccs-injection" output="&#xa;  VULNERABLE:&#xa;  SSL/TLS MITM vulnerability (CCS Injection)&#xa;    State: VULNERABLE&#xa;    Risk factor: High&#xa;      OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h&#xa;      does not properly restrict processing of ChangeCipherSpec messages,&#xa;      which allows man-in-the-middle attackers to trigger use of a zero&#xa;      length master key in certain OpenSSL-to-OpenSSL communications, and&#xa;      consequently hijack sessions or obtain sensitive information, via&#xa;      a crafted TLS handshake, aka the &quot;CCS Injection&quot; vulnerability.&#xa;          &#xa;    References:&#xa;      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224&#xa;      http://www.openssl.org/news/secadv_20140605.txt&#xa;      http://www.cvedetails.com/cve/2014-0224&#xa;"><table key="NMAP-14">
<elem key="title">SSL/TLS MITM vulnerability (CCS Injection)</elem>
<elem key="state">VULNERABLE</elem>
<table key="description">
<elem>OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h&#xa;does not properly restrict processing of ChangeCipherSpec messages,&#xa;which allows man-in-the-middle attackers to trigger use of a zero&#xa;length master key in certain OpenSSL-to-OpenSSL communications, and&#xa;consequently hijack sessions or obtain sensitive information, via&#xa;a crafted TLS handshake, aka the &quot;CCS Injection&quot; vulnerability.&#xa;    </elem>
</table>
<table key="refs">
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224</elem>
<elem>http://www.openssl.org/news/secadv_20140605.txt</elem>
<elem>http://www.cvedetails.com/cve/2014-0224</elem>
</table>
</table>
</script><script id="ssl-dh-params" output="&#xa;  VULNERABLE:&#xa;  Transport Layer Security (TLS) Protocol DHE_EXPORT Ciphers Downgrade MitM (Logjam)&#xa;    State: VULNERABLE&#xa;    IDs:  OSVDB:122331  CVE:CVE-2015-4000&#xa;      The Transport Layer Security (TLS) protocol contains a flaw that is&#xa;      triggered when handling Diffie-Hellman key exchanges defined with&#xa;      the DHE_EXPORT cipher. This may allow a man-in-the-middle attacker&#xa;      to downgrade the security of a TLS session to 512-bit export-grade&#xa;      cryptography, which is significantly weaker, allowing the attacker&#xa;      to more easily break the encryption and monitor or tamper with&#xa;      the encrypted stream.&#xa;    Disclosure date: 2015-5-19&#xa;    Check results:&#xa;      EXPORT-GRADE DH GROUP 1&#xa;            Cipher Suite: TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA&#xa;            Modulus Type: Safe prime&#xa;            Modulus Source: mod_ssl 2.0.x/512-bit MODP group with safe prime modulus&#xa;            Modulus Length: 512&#xa;            Generator Length: 8&#xa;            Public Key Length: 512&#xa;    References:&#xa;      https://weakdh.org&#xa;      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-4000&#xa;      http://osvdb.org/122331&#xa;  &#xa;  Diffie-Hellman Key Exchange Insufficient Group Strength&#xa;    State: VULNERABLE&#xa;      Transport Layer Security (TLS) services that use Diffie-Hellman groups&#xa;      of insufficient strength, especially those using one of a few commonly&#xa;      shared groups, may be susceptible to passive eavesdropping attacks.&#xa;    Check results:&#xa;      WEAK DH GROUP 1&#xa;            Cipher Suite: TLS_DHE_RSA_WITH_DES_CBC_SHA&#xa;            Modulus Type: Safe prime&#xa;            Modulus Source: mod_ssl 2.0.x/1024-bit MODP group with safe prime modulus&#xa;            Modulus Length: 1024&#xa;            Generator Length: 8&#xa;            Public Key Length: 1024&#xa;    References:&#xa;      https://weakdh.org&#xa;"><table key="CVE-2015-4000">
<elem key="title">Transport Layer Security (TLS) Protocol DHE_EXPORT Ciphers Downgrade MitM (Logjam)</elem>
<elem key="state">VULNERABLE</elem>
<table key="ids">
<elem>OSVDB:122331</elem>
<elem>CVE:CVE-2015-4000</elem>
</table>
<table key="description">
<elem>The Transport Layer Security (TLS) protocol contains a flaw that is&#xa;triggered when handling Diffie-Hellman key exchanges defined with&#xa;the DHE_EXPORT cipher. This may allow a man-in-the-middle attacker&#xa;to downgrade the security of a TLS session to 512-bit export-grade&#xa;cryptography, which is significantly weaker, allowing the attacker&#xa;to more easily break the encryption and monitor or tamper with&#xa;the encrypted stream.</elem>
</table>
<table key="dates">
<table key="disclosure">
<elem key="year">2015</elem>
<elem key="day">19</elem>
<elem key="month">5</elem>
</table>
</table>
<elem key="disclosure">2015-5-19</elem>
<table key="check_results">
<elem>EXPORT-GRADE DH GROUP 1&#xa;      Cipher Suite: TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA&#xa;      Modulus Type: Safe prime&#xa;      Modulus Source: mod_ssl 2.0.x/512-bit MODP group with safe prime modulus&#xa;      Modulus Length: 512&#xa;      Generator Length: 8&#xa;      Public Key Length: 512</elem>
</table>
<table key="refs">
<elem>https://weakdh.org</elem>
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-4000</elem>
<elem>http://osvdb.org/122331</elem>
</table>
</table>
<table key="NMAP-7">
<elem key="title">Diffie-Hellman Key Exchange Insufficient Group Strength</elem>
<elem key="state">VULNERABLE</elem>
<table key="description">
<elem>Transport Layer Security (TLS) services that use Diffie-Hellman groups&#xa;of insufficient strength, especially those using one of a few commonly&#xa;shared groups, may be susceptible to passive eavesdropping attacks.</elem>
</table>
<table key="check_results">
<elem>WEAK DH GROUP 1&#xa;      Cipher Suite: TLS_DHE_RSA_WITH_DES_CBC_SHA&#xa;      Modulus Type: Safe prime&#xa;      Modulus Source: mod_ssl 2.0.x/1024-bit MODP group with safe prime modulus&#xa;      Modulus Length: 1024&#xa;      Generator Length: 8&#xa;      Public Key Length: 1024</elem>
</table>
<table key="refs">
<elem>https://weakdh.org</elem>
</table>
</table>
</script><script id="ssl-poodle" output="&#xa;  VULNERABLE:&#xa;  SSL POODLE information leak&#xa;    State: VULNERABLE&#xa;    IDs:  OSVDB:113251  CVE:CVE-2014-3566&#xa;          The SSL protocol 3.0, as used in OpenSSL through 1.0.1i and other&#xa;          products, uses nondeterministic CBC padding, which makes it easier&#xa;          for man-in-the-middle attackers to obtain cleartext data via a&#xa;          padding-oracle attack, aka the &quot;POODLE&quot; issue.&#xa;    Disclosure date: 2014-10-14&#xa;    Check results:&#xa;      TLS_RSA_WITH_3DES_EDE_CBC_SHA&#xa;    References:&#xa;      https://www.openssl.org/~bodo/ssl-poodle.pdf&#xa;      https://www.imperialviolet.org/2014/10/14/poodle.html&#xa;      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3566&#xa;      http://osvdb.org/113251&#xa;"><table key="CVE-2014-3566">
<elem key="title">SSL POODLE information leak</elem>
<elem key="state">VULNERABLE</elem>
<table key="ids">
<elem>OSVDB:113251</elem>
<elem>CVE:CVE-2014-3566</elem>
</table>
<table key="description">
<elem>    The SSL protocol 3.0, as used in OpenSSL through 1.0.1i and other&#xa;    products, uses nondeterministic CBC padding, which makes it easier&#xa;    for man-in-the-middle attackers to obtain cleartext data via a&#xa;    padding-oracle attack, aka the &quot;POODLE&quot; issue.</elem>
</table>
<table key="dates">
<table key="disclosure">
<elem key="year">2014</elem>
<elem key="day">14</elem>
<elem key="month">10</elem>
</table>
</table>
<elem key="disclosure">2014-10-14</elem>
<table key="check_results">
<elem>TLS_RSA_WITH_3DES_EDE_CBC_SHA</elem>
</table>
<table key="refs">
<elem>https://www.openssl.org/~bodo/ssl-poodle.pdf</elem>
<elem>https://www.imperialviolet.org/2014/10/14/poodle.html</elem>
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3566</elem>
<elem>http://osvdb.org/113251</elem>
</table>
</table>
</script><script id="sslv2-drown" output="&#xa;  ciphers: &#xa;    SSL2_RC4_128_EXPORT40_WITH_MD5&#xa;    SSL2_DES_192_EDE3_CBC_WITH_MD5&#xa;    SSL2_RC4_64_WITH_MD5&#xa;    SSL2_RC2_128_CBC_WITH_MD5&#xa;    SSL2_RC4_128_WITH_MD5&#xa;    SSL2_RC2_128_CBC_EXPORT40_WITH_MD5&#xa;    SSL2_DES_64_CBC_WITH_MD5&#xa;  vulns: &#xa;    CVE-2016-0703: &#xa;      title: OpenSSL: Divide-and-conquer session key recovery in SSLv2&#xa;      state: VULNERABLE&#xa;      ids: &#xa;        CVE:CVE-2016-0703&#xa;      description: &#xa;              The get_client_master_key function in s2_srvr.c in the SSLv2 implementation in&#xa;      OpenSSL before 0.9.8zf, 1.0.0 before 1.0.0r, 1.0.1 before 1.0.1m, and 1.0.2 before&#xa;      1.0.2a accepts a nonzero CLIENT-MASTER-KEY CLEAR-KEY-LENGTH value for an arbitrary&#xa;      cipher, which allows man-in-the-middle attackers to determine the MASTER-KEY value&#xa;      and decrypt TLS ciphertext data by leveraging a Bleichenbacher RSA padding oracle, a&#xa;      related issue to CVE-2016-0800.&#xa;    &#xa;      refs: &#xa;        https://www.openssl.org/news/secadv/20160301.txt&#xa;        https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0703&#xa;    CVE-2016-0800: &#xa;      title: OpenSSL: Cross-protocol attack on TLS using SSLv2 (DROWN)&#xa;      state: VULNERABLE&#xa;      ids: &#xa;        CVE:CVE-2016-0800&#xa;      description: &#xa;              The SSLv2 protocol, as used in OpenSSL before 1.0.1s and 1.0.2 before 1.0.2g and&#xa;      other products, requires a server to send a ServerVerify message before establishing&#xa;      that a client possesses certain plaintext RSA data, which makes it easier for remote&#xa;      attackers to decrypt TLS ciphertext data by leveraging a Bleichenbacher RSA padding&#xa;      oracle, aka a &quot;DROWN&quot; attack.&#xa;    &#xa;      refs: &#xa;        https://www.openssl.org/news/secadv/20160301.txt&#xa;        https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0800"><table key="ciphers">
<elem>SSL2_RC4_128_EXPORT40_WITH_MD5</elem>
<elem>SSL2_DES_192_EDE3_CBC_WITH_MD5</elem>
<elem>SSL2_RC4_64_WITH_MD5</elem>
<elem>SSL2_RC2_128_CBC_WITH_MD5</elem>
<elem>SSL2_RC4_128_WITH_MD5</elem>
<elem>SSL2_RC2_128_CBC_EXPORT40_WITH_MD5</elem>
<elem>SSL2_DES_64_CBC_WITH_MD5</elem>
</table>
<table key="vulns">
<table key="CVE-2016-0703">
<elem key="title">OpenSSL: Divide-and-conquer session key recovery in SSLv2</elem>
<elem key="state">VULNERABLE</elem>
<table key="ids">
<elem>CVE:CVE-2016-0703</elem>
</table>
<table key="description">
<elem>      The get_client_master_key function in s2_srvr.c in the SSLv2 implementation in&#xa;      OpenSSL before 0.9.8zf, 1.0.0 before 1.0.0r, 1.0.1 before 1.0.1m, and 1.0.2 before&#xa;      1.0.2a accepts a nonzero CLIENT-MASTER-KEY CLEAR-KEY-LENGTH value for an arbitrary&#xa;      cipher, which allows man-in-the-middle attackers to determine the MASTER-KEY value&#xa;      and decrypt TLS ciphertext data by leveraging a Bleichenbacher RSA padding oracle, a&#xa;      related issue to CVE-2016-0800.&#xa;    </elem>
</table>
<table key="refs">
<elem>https://www.openssl.org/news/secadv/20160301.txt</elem>
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0703</elem>
</table>
</table>
<table key="CVE-2016-0800">
<elem key="title">OpenSSL: Cross-protocol attack on TLS using SSLv2 (DROWN)</elem>
<elem key="state">VULNERABLE</elem>
<table key="ids">
<elem>CVE:CVE-2016-0800</elem>
</table>
<table key="description">
<elem>      The SSLv2 protocol, as used in OpenSSL before 1.0.1s and 1.0.2 before 1.0.2g and&#xa;      other products, requires a server to send a ServerVerify message before establishing&#xa;      that a client possesses certain plaintext RSA data, which makes it easier for remote&#xa;      attackers to decrypt TLS ciphertext data by leveraging a Bleichenbacher RSA padding&#xa;      oracle, aka a &quot;DROWN&quot; attack.&#xa;    </elem>
</table>
<table key="refs">
<elem>https://www.openssl.org/news/secadv/20160301.txt</elem>
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0800</elem>
</table>
</table>
</table>
</script></port>
<port protocol="tcp" portid="995"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="pop3s" tunnel="ssl" method="table" conf="3"/><script id="ssl-ccs-injection" output="&#xa;  VULNERABLE:&#xa;  SSL/TLS MITM vulnerability (CCS Injection)&#xa;    State: VULNERABLE&#xa;    Risk factor: High&#xa;      OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h&#xa;      does not properly restrict processing of ChangeCipherSpec messages,&#xa;      which allows man-in-the-middle attackers to trigger use of a zero&#xa;      length master key in certain OpenSSL-to-OpenSSL communications, and&#xa;      consequently hijack sessions or obtain sensitive information, via&#xa;      a crafted TLS handshake, aka the &quot;CCS Injection&quot; vulnerability.&#xa;          &#xa;    References:&#xa;      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224&#xa;      http://www.openssl.org/news/secadv_20140605.txt&#xa;      http://www.cvedetails.com/cve/2014-0224&#xa;"><table key="NMAP-16">
<elem key="title">SSL/TLS MITM vulnerability (CCS Injection)</elem>
<elem key="state">VULNERABLE</elem>
<table key="description">
<elem>OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h&#xa;does not properly restrict processing of ChangeCipherSpec messages,&#xa;which allows man-in-the-middle attackers to trigger use of a zero&#xa;length master key in certain OpenSSL-to-OpenSSL communications, and&#xa;consequently hijack sessions or obtain sensitive information, via&#xa;a crafted TLS handshake, aka the &quot;CCS Injection&quot; vulnerability.&#xa;    </elem>
</table>
<table key="refs">
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224</elem>
<elem>http://www.openssl.org/news/secadv_20140605.txt</elem>
<elem>http://www.cvedetails.com/cve/2014-0224</elem>
</table>
</table>
</script><script id="ssl-poodle" output="&#xa;  VULNERABLE:&#xa;  SSL POODLE information leak&#xa;    State: VULNERABLE&#xa;    IDs:  OSVDB:113251  CVE:CVE-2014-3566&#xa;          The SSL protocol 3.0, as used in OpenSSL through 1.0.1i and other&#xa;          products, uses nondeterministic CBC padding, which makes it easier&#xa;          for man-in-the-middle attackers to obtain cleartext data via a&#xa;          padding-oracle attack, aka the &quot;POODLE&quot; issue.&#xa;    Disclosure date: 2014-10-14&#xa;    Check results:&#xa;      TLS_RSA_WITH_3DES_EDE_CBC_SHA&#xa;    References:&#xa;      https://www.openssl.org/~bodo/ssl-poodle.pdf&#xa;      https://www.imperialviolet.org/2014/10/14/poodle.html&#xa;      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3566&#xa;      http://osvdb.org/113251&#xa;"><table key="CVE-2014-3566">
<elem key="title">SSL POODLE information leak</elem>
<elem key="state">VULNERABLE</elem>
<table key="ids">
<elem>OSVDB:113251</elem>
<elem>CVE:CVE-2014-3566</elem>
</table>
<table key="description">
<elem>    The SSL protocol 3.0, as used in OpenSSL through 1.0.1i and other&#xa;    products, uses nondeterministic CBC padding, which makes it easier&#xa;    for man-in-the-middle attackers to obtain cleartext data via a&#xa;    padding-oracle attack, aka the &quot;POODLE&quot; issue.</elem>
</table>
<table key="dates">
<table key="disclosure">
<elem key="year">2014</elem>
<elem key="day">14</elem>
<elem key="month">10</elem>
</table>
</table>
<elem key="disclosure">2014-10-14</elem>
<table key="check_results">
<elem>TLS_RSA_WITH_3DES_EDE_CBC_SHA</elem>
</table>
<table key="refs">
<elem>https://www.openssl.org/~bodo/ssl-poodle.pdf</elem>
<elem>https://www.imperialviolet.org/2014/10/14/poodle.html</elem>
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3566</elem>
<elem>http://osvdb.org/113251</elem>
</table>
</table>
</script><script id="sslv2-drown" output="&#xa;  ciphers: &#xa;    SSL2_RC4_128_EXPORT40_WITH_MD5&#xa;    SSL2_DES_192_EDE3_CBC_WITH_MD5&#xa;    SSL2_RC2_128_CBC_WITH_MD5&#xa;    SSL2_RC4_128_WITH_MD5&#xa;    SSL2_RC2_128_CBC_EXPORT40_WITH_MD5&#xa;  forced_ciphers: &#xa;    SSL2_RC4_64_WITH_MD5&#xa;    SSL2_DES_64_CBC_WITH_MD5&#xa;  vulns: &#xa;    CVE-2015-3197: &#xa;      title: OpenSSL: SSLv2 doesn&apos;t block disabled ciphers&#xa;      state: VULNERABLE&#xa;      ids: &#xa;        CVE:CVE-2015-3197&#xa;      description: &#xa;              ssl/s2_srvr.c in OpenSSL 1.0.1 before 1.0.1r and 1.0.2 before 1.0.2f does not&#xa;      prevent use of disabled ciphers, which makes it easier for man-in-the-middle&#xa;      attackers to defeat cryptographic protection mechanisms by performing computations&#xa;      on SSLv2 traffic, related to the get_client_master_key and get_client_hello&#xa;      functions.&#xa;    &#xa;      refs: &#xa;        https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3197&#xa;        https://www.openssl.org/news/secadv/20160128.txt&#xa;    CVE-2016-0800: &#xa;      title: OpenSSL: Cross-protocol attack on TLS using SSLv2 (DROWN)&#xa;      state: VULNERABLE&#xa;      ids: &#xa;        CVE:CVE-2016-0800&#xa;      description: &#xa;              The SSLv2 protocol, as used in OpenSSL before 1.0.1s and 1.0.2 before 1.0.2g and&#xa;      other products, requires a server to send a ServerVerify message before establishing&#xa;      that a client possesses certain plaintext RSA data, which makes it easier for remote&#xa;      attackers to decrypt TLS ciphertext data by leveraging a Bleichenbacher RSA padding&#xa;      oracle, aka a &quot;DROWN&quot; attack.&#xa;    &#xa;      refs: &#xa;        https://www.openssl.org/news/secadv/20160301.txt&#xa;        https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0800"><table key="ciphers">
<elem>SSL2_RC4_128_EXPORT40_WITH_MD5</elem>
<elem>SSL2_DES_192_EDE3_CBC_WITH_MD5</elem>
<elem>SSL2_RC2_128_CBC_WITH_MD5</elem>
<elem>SSL2_RC4_128_WITH_MD5</elem>
<elem>SSL2_RC2_128_CBC_EXPORT40_WITH_MD5</elem>
</table>
<table key="forced_ciphers">
<elem>SSL2_RC4_64_WITH_MD5</elem>
<elem>SSL2_DES_64_CBC_WITH_MD5</elem>
</table>
<table key="vulns">
<table key="CVE-2015-3197">
<elem key="title">OpenSSL: SSLv2 doesn&apos;t block disabled ciphers</elem>
<elem key="state">VULNERABLE</elem>
<table key="ids">
<elem>CVE:CVE-2015-3197</elem>
</table>
<table key="description">
<elem>      ssl/s2_srvr.c in OpenSSL 1.0.1 before 1.0.1r and 1.0.2 before 1.0.2f does not&#xa;      prevent use of disabled ciphers, which makes it easier for man-in-the-middle&#xa;      attackers to defeat cryptographic protection mechanisms by performing computations&#xa;      on SSLv2 traffic, related to the get_client_master_key and get_client_hello&#xa;      functions.&#xa;    </elem>
</table>
<table key="refs">
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3197</elem>
<elem>https://www.openssl.org/news/secadv/20160128.txt</elem>
</table>
</table>
<table key="CVE-2016-0800">
<elem key="title">OpenSSL: Cross-protocol attack on TLS using SSLv2 (DROWN)</elem>
<elem key="state">VULNERABLE</elem>
<table key="ids">
<elem>CVE:CVE-2016-0800</elem>
</table>
<table key="description">
<elem>      The SSLv2 protocol, as used in OpenSSL before 1.0.1s and 1.0.2 before 1.0.2g and&#xa;      other products, requires a server to send a ServerVerify message before establishing&#xa;      that a client possesses certain plaintext RSA data, which makes it easier for remote&#xa;      attackers to decrypt TLS ciphertext data by leveraging a Bleichenbacher RSA padding&#xa;      oracle, aka a &quot;DROWN&quot; attack.&#xa;    </elem>
</table>
<table key="refs">
<elem>https://www.openssl.org/news/secadv/20160301.txt</elem>
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0800</elem>
</table>
</table>
</table>
</script></port>
<port protocol="tcp" portid="32768"><state state="open" reason="syn-ack" reason_ttl="64"/><service name="status" version="1" extrainfo="RPC #100024" method="probed" conf="10"/></port>
</ports>
<hostscript><script id="samba-vuln-cve-2012-1182" output="Could not negotiate a connection:SMB: ERROR: Server returned less data than it was supposed to (one or more fields are missing); aborting [14]">false</script><script id="smb-vuln-cve2009-3103" output="&#xa;  VULNERABLE:&#xa;  SMBv2 exploit (CVE-2009-3103, Microsoft Security Advisory 975497)&#xa;    State: VULNERABLE&#xa;    IDs:  CVE:CVE-2009-3103&#xa;          Array index error in the SMBv2 protocol implementation in srv2.sys in Microsoft Windows Vista Gold, SP1, and SP2,&#xa;          Windows Server 2008 Gold and SP2, and Windows 7 RC allows remote attackers to execute arbitrary code or cause a&#xa;          denial of service (system crash) via an &amp; (ampersand) character in a Process ID High header field in a NEGOTIATE&#xa;          PROTOCOL REQUEST packet, which triggers an attempted dereference of an out-of-bounds memory location,&#xa;          aka &quot;SMBv2 Negotiation Vulnerability.&quot;&#xa;          &#xa;    Disclosure date: 2009-09-08&#xa;    References:&#xa;      http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3103&#xa;      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3103&#xa;"><table key="CVE-2009-3103">
<elem key="title">SMBv2 exploit (CVE-2009-3103, Microsoft Security Advisory 975497)</elem>
<elem key="state">VULNERABLE</elem>
<table key="ids">
<elem>CVE:CVE-2009-3103</elem>
</table>
<table key="description">
<elem>    Array index error in the SMBv2 protocol implementation in srv2.sys in Microsoft Windows Vista Gold, SP1, and SP2,&#xa;    Windows Server 2008 Gold and SP2, and Windows 7 RC allows remote attackers to execute arbitrary code or cause a&#xa;    denial of service (system crash) via an &amp; (ampersand) character in a Process ID High header field in a NEGOTIATE&#xa;    PROTOCOL REQUEST packet, which triggers an attempted dereference of an out-of-bounds memory location,&#xa;    aka &quot;SMBv2 Negotiation Vulnerability.&quot;&#xa;    </elem>
</table>
<table key="dates">
<table key="disclosure">
<elem key="year">2009</elem>
<elem key="day">08</elem>
<elem key="month">09</elem>
</table>
</table>
<elem key="disclosure">2009-09-08</elem>
<table key="refs">
<elem>http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3103</elem>
<elem>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3103</elem>
</table>
</table>
</script><script id="smb-vuln-ms10-054" output="false">false</script><script id="smb-vuln-ms10-061" output="Could not negotiate a connection:SMB: ERROR: Server returned less data than it was supposed to (one or more fields are missing); aborting [14]">false</script></hostscript><times srtt="17624" rttvar="4350" to="100000"/>
</host>
<runstats><finished time="1565803223" timestr="Wed Aug 14 20:20:23 2019" elapsed="564.93" summary="Nmap done at Wed Aug 14 20:20:23 2019; 1 IP address (1 host up) scanned in 564.93 seconds" exit="success"/><hosts up="1" down="0" total="1"/>
</runstats>
</nmaprun>
